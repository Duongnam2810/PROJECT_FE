//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_AUTH_URL = new InjectionToken<string>('API_AUTH_URL');

@Injectable({
    providedIn: 'root'
})
export class AuthApiService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_AUTH_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ballApiV1AuthAuthenticate(body: AuthenticateRequest | undefined): Observable<AuthenticateResponseApiResponse> {
        let url_ = this.baseUrl + "/Ball/api/v1/Auth/Authenticate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json; x-api-version=1.0",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBallApiV1AuthAuthenticate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBallApiV1AuthAuthenticate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticateResponseApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticateResponseApiResponse>;
        }));
    }

    protected processBallApiV1AuthAuthenticate(response: HttpResponseBase): Observable<AuthenticateResponseApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResponseApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    ballApiV1AuthRefreshToken(body: TokenForRefresh | undefined): Observable<AuthenticateResponseApiResponse> {
        let url_ = this.baseUrl + "/Ball/api/v1/Auth/Refresh-token";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json; x-api-version=1.0",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processBallApiV1AuthRefreshToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processBallApiV1AuthRefreshToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<AuthenticateResponseApiResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<AuthenticateResponseApiResponse>;
        }));
    }

    protected processBallApiV1AuthRefreshToken(response: HttpResponseBase): Observable<AuthenticateResponseApiResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthenticateResponseApiResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    /**
     * @param x_api_version (optional) 
     * @return Success
     */
    weatherForecast(x_api_version: string | undefined): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "x-api-version": x_api_version !== undefined && x_api_version !== null ? "" + x_api_version : "",
                "Accept": "text/plain; x-api-version=1.0"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWeatherForecast(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWeatherForecast(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<WeatherForecast[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<WeatherForecast[]>;
        }));
    }

    protected processWeatherForecast(response: HttpResponseBase): Observable<WeatherForecast[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class AuthenticateRequest implements IAuthenticateRequest {
    username!: string;
    password!: string;

    constructor(data?: IAuthenticateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): AuthenticateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IAuthenticateRequest {
    username: string;
    password: string;
}

export class AuthenticateResponse implements IAuthenticateResponse {
    jwtToken?: string | undefined;
    refreshToken?: string | undefined;
    id?: string | undefined;
    fullName?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    diachi?: string | undefined;
    chucvu?: string | undefined;
    avatar?: string | undefined;
    status?: number;
    organization?: string | undefined;
    organizationId?: string | undefined;
    userType?: number | undefined;
    lstMenu?: MenuOfUserModel[] | undefined;
    image?: string | undefined;
    provider?: string | undefined;

    constructor(data?: IAuthenticateResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            if (data.lstMenu) {
                this.lstMenu = [];
                for (let i = 0; i < data.lstMenu.length; i++) {
                    let item = data.lstMenu[i];
                    this.lstMenu[i] = item && !(<any>item).toJSON ? new MenuOfUserModel(item) : <MenuOfUserModel>item;
                }
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jwtToken = _data["jwtToken"];
            this.refreshToken = _data["refreshToken"];
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.username = _data["username"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.diachi = _data["diachi"];
            this.chucvu = _data["chucvu"];
            this.avatar = _data["avatar"];
            this.status = _data["status"];
            this.organization = _data["organization"];
            this.organizationId = _data["organizationId"];
            this.userType = _data["userType"];
            if (Array.isArray(_data["lstMenu"])) {
                this.lstMenu = [] as any;
                for (let item of _data["lstMenu"])
                    this.lstMenu!.push(MenuOfUserModel.fromJS(item));
            }
            this.image = _data["image"];
            this.provider = _data["provider"];
        }
    }

    static fromJS(data: any): AuthenticateResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jwtToken"] = this.jwtToken;
        data["refreshToken"] = this.refreshToken;
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["username"] = this.username;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["diachi"] = this.diachi;
        data["chucvu"] = this.chucvu;
        data["avatar"] = this.avatar;
        data["status"] = this.status;
        data["organization"] = this.organization;
        data["organizationId"] = this.organizationId;
        data["userType"] = this.userType;
        if (Array.isArray(this.lstMenu)) {
            data["lstMenu"] = [];
            for (let item of this.lstMenu)
                data["lstMenu"].push(item.toJSON());
        }
        data["image"] = this.image;
        data["provider"] = this.provider;
        return data;
    }
}

export interface IAuthenticateResponse {
    jwtToken?: string | undefined;
    refreshToken?: string | undefined;
    id?: string | undefined;
    fullName?: string | undefined;
    username?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    diachi?: string | undefined;
    chucvu?: string | undefined;
    avatar?: string | undefined;
    status?: number;
    organization?: string | undefined;
    organizationId?: string | undefined;
    userType?: number | undefined;
    lstMenu?: IMenuOfUserModel[] | undefined;
    image?: string | undefined;
    provider?: string | undefined;
}

export class AuthenticateResponseApiResponse implements IAuthenticateResponseApiResponse {
    code?: string | undefined;
    message?: string | undefined;
    data?: AuthenticateResponse;

    constructor(data?: IAuthenticateResponseApiResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
            this.data = data.data && !(<any>data.data).toJSON ? new AuthenticateResponse(data.data) : <AuthenticateResponse>this.data;
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.message = _data["message"];
            this.data = _data["data"] ? AuthenticateResponse.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AuthenticateResponseApiResponse {
        data = typeof data === 'object' ? data : {};
        let result = new AuthenticateResponseApiResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["message"] = this.message;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAuthenticateResponseApiResponse {
    code?: string | undefined;
    message?: string | undefined;
    data?: IAuthenticateResponse;
}

export class MenuOfUserModel implements IMenuOfUserModel {
    id?: string | undefined;
    iconClass?: string | undefined;
    parent?: string | undefined;
    text?: string | undefined;
    value?: string | undefined;
    cssClass?: string | undefined;
    state?: string | undefined;
    function?: string | undefined;
    arrange?: number | undefined;
    type?: string | undefined;

    constructor(data?: IMenuOfUserModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.iconClass = _data["iconClass"];
            this.parent = _data["parent"];
            this.text = _data["text"];
            this.value = _data["value"];
            this.cssClass = _data["cssClass"];
            this.state = _data["state"];
            this.function = _data["function"];
            this.arrange = _data["arrange"];
            this.type = _data["type"];
        }
    }

    static fromJS(data: any): MenuOfUserModel {
        data = typeof data === 'object' ? data : {};
        let result = new MenuOfUserModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["iconClass"] = this.iconClass;
        data["parent"] = this.parent;
        data["text"] = this.text;
        data["value"] = this.value;
        data["cssClass"] = this.cssClass;
        data["state"] = this.state;
        data["function"] = this.function;
        data["arrange"] = this.arrange;
        data["type"] = this.type;
        return data;
    }
}

export interface IMenuOfUserModel {
    id?: string | undefined;
    iconClass?: string | undefined;
    parent?: string | undefined;
    text?: string | undefined;
    value?: string | undefined;
    cssClass?: string | undefined;
    state?: string | undefined;
    function?: string | undefined;
    arrange?: number | undefined;
    type?: string | undefined;
}

export class TokenForRefresh implements ITokenForRefresh {
    tag?: string | undefined;
    refreshToken?: string | undefined;

    constructor(data?: ITokenForRefresh) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tag = _data["tag"];
            this.refreshToken = _data["refreshToken"];
        }
    }

    static fromJS(data: any): TokenForRefresh {
        data = typeof data === 'object' ? data : {};
        let result = new TokenForRefresh();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tag"] = this.tag;
        data["refreshToken"] = this.refreshToken;
        return data;
    }
}

export interface ITokenForRefresh {
    tag?: string | undefined;
    refreshToken?: string | undefined;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    readonly temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            (<any>this).temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data;
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}